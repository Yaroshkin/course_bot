import logging
import requests
import json
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import os
import asyncio

load_dotenv()

API_TOKEN = os.getenv('TOKEN')
API_KEY = os.getenv('API_KEY')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

URL = 'https://api.openweathermap.org/data/2.5/weather'
SELECT_CITY = "?q={0}&appid={1}"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
cities = ['–î–Ω–µ–ø—Ä', '–ö–∏–µ–≤', '–ó–∞–ø–æ—Ä–æ–∂—å–µ', '–ö—Ä–∏–≤–æ–π —Ä–æ–≥', '–û–¥–µ—Å—Å–∞', '–õ—å–≤–æ–≤', '–•–∞—Ä—å–∫–æ–≤', '–î–æ–Ω–µ—Ü–∫','–õ—É—Ü–∫']

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
cached_currency = None

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ü–æ–≥–æ–¥–∞ üå¶', '–ö—É—Ä—Å üí≤')
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –û–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞—Ç—å", reply_markup=markup)

@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    global cached_currency
    if message.text == '–ü–æ–≥–æ–¥–∞ üå¶':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        
        for i in range(0, len(cities), 4):
            markup.row(*cities[i:i+4])
        markup.row('–ù–∞–∑–∞–¥ ‚¨Ö')

        await message.answer("–í—ã–±–µ—Ä–∏, –ø–æ–≥–æ–¥—É –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞–∑–∞—Ç—å", reply_markup=markup)
    elif message.text in cities:
        await ent(message)
    elif message.text == '–ù–∞–∑–∞–¥ ‚¨Ö':
        await start(message)
    elif message.text == '–ö—É—Ä—Å üí≤':
        if not cached_currency:
            await update_currency_cache()
        await message.answer(cached_currency)

async def update_currency_cache():
    global cached_currency
    try:
        response = requests.get('https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5')
        response.raise_for_status()
        json_data = json.loads(response.text)
        emoji = {'USD': '$', 'EUR': '‚Ç¨', 'BTC': '‚Çø'}
        textmg = ''
        for babki in json_data:
            textmg += emoji.get(babki["ccy"], '') + ' ' + babki["ccy"] + '   ' + babki["buy"] + '  ' + babki["sale"] + '\n'
        cached_currency = textmg
    except requests.exceptions.RequestException as e:
        cached_currency = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        logging.error(f"Error fetching currency data: {e}")

async def ent(message: types.Message):
    try:
        response = requests.get(URL + SELECT_CITY.format(message.text, API_KEY))
        response.raise_for_status()
        json_dt = json.loads(response.text)
        
        txtw = ''
        weath = json_dt.get('weather')
        if weath:
            if weath[0]['description'] == 'overcast clouds':
                weath[0]['description'] = '–û–±–ª–∞—á–Ω–æ ‚òÅ'
            elif weath[0]['description'] == 'light rain':
                weath[0]['description'] = '–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å ‚òî'
            elif weath[0]['description'] == 'clear sky':
                weath[0]['description'] = '–Ø—Å–Ω–æ üå§'
            elif weath[0]['description'] == 'moderate rain':
                weath[0]['description'] = '–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å üå¶'
            elif weath[0]['description'] == 'scattered clouds':
                weath[0]['description'] = '–†–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞ ‚õÖ'
            elif weath[0]['description'] == 'few clouds':
                weath[0]['description'] = '–ù–µ–º–Ω–æ–≥–æ –æ–±–ª–∞—á–Ω–æ ‚õÖ'
            
            wind = json_dt.get('wind')
            temp = json_dt.get('main')
            country = json_dt.get('sys')
            if country and country.get('country') == 'UA':
                country['country'] += 'üá∫üá¶'
            
            iconT = 'ü•∂' if temp['temp'] - 273.15 < 10 else 'ü•µ' if temp['temp'] - 273.15 > 10 else ''
            iconV = 'ü•∂' if temp['feels_like'] - 273.15 < 10 else 'ü•µ'
            
            txtw += json_dt['name'] + ' ' + f'{country["country"]}' + '\n' + f"{weath[0]['description']}" + '\n' + \
                    f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {wind['speed']} –º/—Å üå¨" + "\n" + \
                    f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ {float(("{0:.1f}").format(temp["temp"] - 273.15))} ¬∫C ' + iconT + '\n' + \
                    f'–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {float(("{0:.1f}").format(temp["feels_like"] - 273.15))} ¬∫C' + iconV + '\n' + \
                    f'–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ {temp["humidity"]}%'
            await message.answer(txtw)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except requests.exceptions.RequestException as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error(f"Error fetching weather data for {message.text}: {e}")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
